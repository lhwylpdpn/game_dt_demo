syntax = "proto3";

/*
 * 1. CS -> ready_game
*/

message ReadyGameRequest {
    optional int32 msgId = 1001;
    int32 mapId = 1;        // 地图 ID
    repeated Hero heroes = 2; // 英雄列表

    message Hero {
        int32 position = 1; // 英雄位置
        repeated int32 cardId = 2;    // 英雄卡牌列表
        int32 heroId = 3;        // 英雄唯一 ID

    }
}

message ReadyGameResponse {
    optional int32 msgId = 1002;
    int32 roomId = 1;    // 房间 ID
    bool result = 2;      // 游戏结果（成功与否）
}


/*
 * 2. SC -> start_game
*/

message StartGameRequest {
    optional int32 msgId = 1003;
    int32 roomId = 1;  // 房间 ID
    repeated heroChange change = 2;  // 玩家状态变化列表
    message heroChange {
     int32 heroUniqueId = 1;        // 英雄唯一 ID
     int32 heroId = 2;        // 英雄唯一 ID
     PbVector3 position = 3;     // 状态变化描述，直接使用字符串
    }
}

message StartGameResponse {
    optional int32 msgId = 1004;
    int32 roomId = 1;   // 房间 ID
    bool result = 2;     // 游戏开始结果
}

/*  * 3. CS -> start round */

message StartRoundRequest {
    optional int32 msgId = 1005;
    int32 roomId = 1;        // 房间 ID
    int32 round = 2;
}
message StartRoundResponse {
    optional int32 msgId = 1006;
    bool result = 1;
    int32 round = 2;
    int32 roomId = 3;        // 房间 ID


}

/**
 * 4. CS -> play_card
 */

message PlayCardRequest {
    optional int32 msgId = 1007;
    int32 roomId = 1;        // 房间 ID
    int32 round = 2;          // 回合数
    repeated CardChange change = 4;  // 变化列表

    message CardChange {
        int32 cardUniqueId = 1;       // 卡牌唯一 ID
        PbVector3 releasePosition = 2; // 释放位置 (x, y, z)
        string targetType = 3;          // 目标：hero 或 point
        int32 heroUniqueId = 4;          // 英雄 ID
        int32 cardId = 5;       // 卡牌ID

    }
}

message PlayCardResponse {
    optional int32 msgId = 1008;
    int32 roomId = 1;    // 房间 ID
    bool result = 2;      // 游戏回合结果（成功与否）
}


/**
 * 5. SC -> action
 */

message BattleActionBase {
    int64 heroUniqueId = 1; // 英雄唯一ID
    oneof action {
        MoveAction moveAction = 2;
        SkillAction skillAction = 3;
    }
}

message MoveAction {
    repeated PbVector3 movePath = 1; // 移动路径坐标
    repeated ChangeHero targetHeroList = 2; // 目标英雄集合
}

message SkillAction {
    int32 skillId = 1;  // 技能ID
    repeated ChangeHero targetHeroList = 2; // 目标英雄集合
}

message ChangeHero {
    int64 heroUniqueId = 1; // 目标唯一ID
    ChangeStateType type = 2; // 改变状态类型
    repeated ChangeState changeStateList = 3; // 改变状态集合
}

enum ChangeStateType {
    Damage = 0;   // 伤害
    Heal = 1;     // 治疗
}

message ChangeState {
    oneof state {
        int32 hp = 1; // 增减血量
        PbVector3 pushPosition = 2; // 击退坐标
        BuffState buffState = 3; // 增减buff
    }
}

message BuffState {
    int32 buffId = 1;
    int32 round = 2; // 增减回合数
}

message PbVector3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

// ActionRequest 消息
message ActionRequest {
    optional int32 msgId = 1009;
    int32 roomId = 1;      // 房间 ID
    int32 playerId = 2;    // 玩家 ID
    int32 actionId = 3;    // 动作帧顺序
    int32 level = 4;        // 阶段
    int32 round = 5;        // 回合
    bool roundStatus = 6; // 回合状态
    bool gameOver = 7;     // 游戏是否结束
    int32 winner = 8;       // 胜利者玩家 ID
    BattleActionBase battleAction = 9; // BattleActionBase 消息
}

message ActionResponse {
    optional int32 msgId = 1010;
    int32 roomId = 1;  // 房间 ID
    int32 round = 2;    // 回合
    bool result = 3;    // 游戏结果（成功与否）
}


service CardGameService {
  // 1. 玩家准备就绪
  rpc ReadyGame(ReadyGameRequest) returns (ReadyGameResponse);

  // 2. 开始游戏
  rpc StartGame(StartGameRequest) returns (StartGameResponse);

  // 3. 开始回合
  rpc StartRound(StartRoundRequest) returns (StartRoundResponse);

  // 4. 玩家出牌
  rpc PlayCard(PlayCardRequest) returns (PlayCardResponse);

  // 5. 玩家行动
  rpc PlayerAction(ActionRequest) returns (ActionResponse);

}

