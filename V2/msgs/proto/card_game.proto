syntax = "proto3";

/*
 * 1. CS -> ready_game
*/

message ReadyGameRequest {
    int32 msgId = 1;
    int32 mapId = 2;        // 地图 ID
    int32 playerId = 3;     // 玩家 ID
    repeated Hero heroes = 4; // 英雄列表

    message Hero {
        int32 heroUniqueId = 1;        // 英雄唯一 ID
        repeated string position = 2; // 英雄位置
        repeated string cards = 3;    // 英雄卡牌列表
    }
}

message ReadyGameResponse {
    int32 msgId = 1;
    int32 roomId = 2;    // 房间 ID
    int32 playerId = 3;  // 玩家 ID
    bool result = 4;      // 游戏结果（成功与否）
}


/*
 * 2. SC -> start_game
*/

message StartGameRequest {
    int32 msgId = 1;
    int32 roomId = 2;  // 房间 ID
    repeated PlayerChange change = 3;  // 玩家状态变化列表

    message PlayerChange {
        int32 playerId = 1;  // 玩家 ID
        string change = 2;     // 状态变化描述，直接使用字符串
    }
}

message StartGameResponse {
    int32 msgId = 1;
    int32 roomId = 2;   // 房间 ID
    bool result = 3;     // 游戏开始结果
}

/**
 * 3. CS -> play_card
 */

message PlayCardRequest {
    int32 msgId = 1;
    int32 roomId = 2;        // 房间 ID
    int32 playerId = 3;      // 玩家 ID
    int32 round = 4;          // 回合数
    repeated Change change = 5;  // 变化列表

    message Change {
        CardChange change = 1;      // 卡牌变化
    }

    message CardChange {
        int32 cardUniqueId = 1;       // 卡牌唯一 ID
        repeated int32 release_position = 2; // 释放位置 (x, y, z)
        string target = 3;          // 目标：hero 或 point
        int32 heroUniqueId = 4;          // 英雄 ID
    }
}

message PlayCardResponse {
    int32 msgId = 1;
    int32 roomId = 2;    // 房间 ID
    bool result = 3;      // 游戏回合结果（成功与否）
}

service CardGameService {
  // 1. 玩家准备就绪
  rpc ReadyGame(ReadyGameRequest) returns (ReadyGameResponse);

  // 2. 开始游戏
  rpc StartGame(StartGameRequest) returns (StartGameResponse);

    // 3. 玩家出牌
  rpc PlayCard(PlayCardRequest) returns (PlayCardResponse);

}

