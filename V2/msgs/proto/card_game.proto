syntax = "proto3";


// ===============
// 基础消息定义
// ===============

/**
 * 玩家信息
 */
message Player {
  string player_id = 1;    // 玩家唯一 ID
  string player_name = 2;  // 玩家名称/昵称
}

/**
 * 目标信息（在出牌时指定目标）
 */
message Target {
  string target_id = 1;     // 目标对象 ID
  float release_x = 2;      // 释放点位 X 坐标
  float release_y = 3;      // 释放点位 Y 坐标
  float release_range = 4;  // 释放范围
}



// ===============
// 请求与响应消息
// ===============

/*
 * 1. CS -> ready_game
*/

message ReadyGameRequest {
    int32 msgid = 1;
    int32 mapId = 2;        // 地图 ID
    int32 playerId = 3;     // 玩家 ID
    repeated Hero heroes = 4; // 英雄列表

    message Hero {
        int32 heroUniqueId = 1;        // 英雄唯一 ID
        repeated string position = 2; // 英雄位置
        repeated string cards = 3;    // 英雄卡牌列表
    }
}

message ReadyGameResponse {
    int32 msgid = 1;
    int32 roomId = 2;    // 房间 ID
    int32 playerId = 3;  // 玩家 ID
    bool result = 4;      // 游戏结果（成功与否）
}


/*
 * 2. SC -> start_game
*/

message StartGameRequest {
    int32 msgid = 1;
    int32 roomId = 2;  // 房间 ID
    repeated PlayerChange change = 3;  // 玩家状态变化列表

    message PlayerChange {
        int32 playerId = 1;  // 玩家 ID
        string change = 2;     // 状态变化描述，直接使用字符串
    }
}

message StartGameResponse {
    int32 msgid = 1;
    int32 roomId = 2;   // 房间 ID
    bool result = 3;     // 游戏开始结果
}

/**
 * 3. CS -> play_card
 */

message PlayCardRequest {
    int32 roomId = 1;        // 房间 ID
    int32 playerId = 2;      // 玩家 ID
    int32 round = 3;          // 回合数
    repeated Change change = 4;  // 变化列表

    message Change {
        CardChange change = 1;      // 卡牌变化
    }

    message CardChange {
        int32 cardUniqueId = 1;       // 卡牌唯一 ID
        repeated int32 release_position = 2; // 释放位置 (x, y, z)
        string target = 3;          // 目标：hero 或 point
        int32 heroUniqueId = 4;          // 英雄 ID
    }
}

message PlayCardResponse {
    int32 roomId = 1;    // 房间 ID
    bool result = 2;      // 游戏回合结果（成功与否）
}

/**
 * 4. CS -> end_turn 结束回合
 */

message EndTurnRequest {
  string game_id = 1;
  string player_id = 2;
}

message EndTurnResponse {
  bool success = 1;
  string message = 2;
}

/**
 * 5. CS -> end_game 游戏结束
 */

message EndGameRequest {
  string game_id = 1;
  string winner_id = 2;
}

message EndGameResponse {
  bool success = 1;
  string message = 2;
  string final_winner_id = 3;
}

// ===============
// gRPC 服务定义
// ===============

service CardGameService {
  // 1. 玩家准备就绪
  rpc ReadyGame(ReadyGameRequest) returns (ReadyGameResponse);

  // 2. 开始游戏
  rpc StartGame(StartGameRequest) returns (StartGameResponse);

  // 3. 玩家出牌
  rpc PlayCard(PlayCardRequest) returns (PlayCardResponse);

  // 4. 结束回合
  rpc EndTurn(EndTurnRequest) returns (EndTurnResponse);

  // 5. 结束游戏
  rpc EndGame(EndGameRequest) returns (EndGameResponse);
}
